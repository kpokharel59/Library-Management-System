
public class RecursiveMatrix {

	static int multcount=0;
	static int recursivecalls=0;
	static int m[][];
	static int s[][];
	public static void main(String args[])
	{
		//int p[]={5, 6, 4, 8, 7, 9, 7, 8, 6, 9, 3, 7, 6, 5};
		//int p[]={5,9,11,3}; 
		int p[]={10, 20, 30, 40, 50, 60};
		//int p[]={5, 2, 4, 3, 7, 9, 7, 8, 6, 1, 3, 7, 6, 5};
		m = new int[p.length-1][p.length-1];
		s = new int[p.length-1][p.length-1];
		long t1=System.nanoTime();
		int z=recursivechainmatrix(p,0,p.length-2);
		long t2=System.nanoTime();
		System.out.println("Running Time"+" "+(t2-t1));
		System.out.println("\nSclar Multiplications"+ z);
		System.out.println("Number of Recursive calls: "+" "+ recursivecalls);
		System.out.println("Paranthesized output");
		parenthesize(s,0,p.length-2);
		System.out.println();
	}
	public static int recursivechainmatrix(int p[],int i,int j)
	{
		if(i==j)
		{
			return 0;
		}

		m[i][j]=Integer.MAX_VALUE;
		int q=0;
		for(int k=i;k<=j-1;k++)
		{
			q= recursivechainmatrix(p,i, k) + recursivechainmatrix(p,k+1,j)+p[i]*p[k+1]*p[j+1];
			multcount +=2;
			recursivecalls +=2;
			if(q<m[i][j])
			{
				m[i][j]=q;
				s[i][j]=k;
			}
		}
		return m[i][j];
	}

	public static void parenthesize(int s[][], int i,int j){
		if(i==j){
			System.out.print("A"+(i+1));
		}else{
			System.out.print("(");
			parenthesize(s, i, s[i][j]);
			parenthesize(s, s[i][j] + 1, j);
			System.out.print(")");
		}
	}
}